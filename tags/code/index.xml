<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on HANDMADE LOG</title><link>https://seungrye.github.io/tags/code/</link><description>Recent content in code on HANDMADE LOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 27 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://seungrye.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ 에서 Lambda 와 Functional feature</title><link>https://seungrye.github.io/posts/2021-01-27-cpp-lambda-and-functional/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2021-01-27-cpp-lambda-and-functional/</guid><description>목적 람다를 &amp;lsquo;어떻게&amp;rsquo; 쓰는지 에 대해 설명합니다. 람다가 &amp;lsquo;뭔지&amp;rsquo;, &amp;lsquo;어디에&amp;rsquo</description></item><item><title>C++ Error Handling Revisited - Raphael Meyer 보면서 정리</title><link>https://seungrye.github.io/posts/2020-11-14-c++-error-handling-revisited/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-11-14-c++-error-handling-revisited/</guid><description>&lt;p>C++ 에서 에러 처리를 어떻게 할수 있는지에 대해 알아보는 &lt;a href="https://youtu.be/Ybmomkc48wg">영상&lt;/a>을 보면서 정리(?) 한 내용입니다.&lt;/p>
&lt;p>영상에서는 haskell 예제를 보여주며 functional 컨셉을 설명하지만, (영어가 짧아 이해가 되지 않아) 단순히 변경되어가는 코드만 정리했습니다.
몇가지 코드(방법)이 더 있었는데 코드 자체가 이해가 안되서 정리하지 않았습니다.&lt;/p></description></item><item><title>Show code of exception occurred when call exec on python</title><link>https://seungrye.github.io/posts/2020-08-04-show_code_of_exception_occurred_when_call_exec_on_python/</link><pubDate>Tue, 04 Aug 2020 15:29:30 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-08-04-show_code_of_exception_occurred_when_call_exec_on_python/</guid><description>python 에서 exec 함수를 통해 임의의 코드를 수행시킬때, 예외가 발생했다면, 예외가 발생한 부분을 정확히 알고 싶을때 어떻게 할 수 있을까요@.@? 다음과 같이 traceback 을 서식화</description></item><item><title>NestedDefaultOrderedDict on Python</title><link>https://seungrye.github.io/posts/2020-07-28-nesteddefaultordereddict-on-python/</link><pubDate>Tue, 28 Jul 2020 13:53:25 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-28-nesteddefaultordereddict-on-python/</guid><description>python 3.7 부터는 dict 의 order 가 보장되지만, 낮은 버전의 python 에서는 order 이 보장되지 않을 수 있습니다. (3.5 에서는 order 가 보장되지 않음. OrderedDict 를 사용해야 함.) 그리고, 다음과 같이 nested</description></item><item><title>Convert nested dict to ordered dict on Python</title><link>https://seungrye.github.io/posts/2020-07-23-convert-nested-dict-to-ordereddict-on-python/</link><pubDate>Thu, 23 Jul 2020 16:56:10 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-23-convert-nested-dict-to-ordereddict-on-python/</guid><description>다음과 같이 충첩된 dict 가 있다고 할때, dict_ = { &amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: [2, 3, 4], &amp;#39;c&amp;#39;: { &amp;#39;d&amp;#39;: 5 }, &amp;#39;d&amp;#39;: &amp;#39;6789&amp;#39; } ordered dict 로 변환하기 위해서는 다음과 같이 재귀 함수를 만들어서 변환할 수 있다. from collections import OrderedDict def</description></item><item><title>Code Sample</title><link>https://seungrye.github.io/posts/2016-03-08-code-sample/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2016-03-08-code-sample/</guid><description>&lt;p>The following are two code samples using syntax highlighting.&lt;/p></description></item></channel></rss>